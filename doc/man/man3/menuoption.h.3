.TH "lib/menuoption.h" 3 "Fri Jan 6 2023" "greenland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/menuoption.h
.SH SYNOPSIS
.br
.PP
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef enum \fBMenuOption\fP \fBMenuOption\fP"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBMenuOption\fP { \fBPLANT_TREE\fP = 1, \fBQUERY_TREE\fP, \fBUPDATE_TREE\fP, \fBEXIT_PROGRAM\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "char * \fBmoption_handle\fP (int new_sockfd, int semid, char *cli_addr, \fBMenuOption\fP mo)"
.br
.ti -1c
.RI "void \fBmoption_display\fP (\fBMenuOption\fP *opt)"
.br
.ti -1c
.RI "const char * \fBgetMenuOptionName\fP (enum \fBMenuOption\fP op)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
2022-11-16 23:05:32 PM +0800 
.RE
.PP

.PP
Definition in file \fBmenuoption\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef enum \fBMenuOption\fP \fBMenuOption\fP"
MenuOption defines available options in the client menu 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBMenuOption\fP"
MenuOption defines available options in the client menu 
.PP
Definition at line 11 of file menuoption\&.h\&.
.PP
.nf
11 { PLANT_TREE = 1, QUERY_TREE, UPDATE_TREE, EXIT_PROGRAM } MenuOption;
.fi
.SH "Function Documentation"
.PP 
.SS "const char* getMenuOptionName (enum \fBMenuOption\fP op)"
Get menu option into readable string
.PP
\fBParameters\fP
.RS 4
\fIop\fP A menu option
.RE
.PP
\fBReturns\fP
.RS 4
A string that specifies the name of menu option, NULL if the state is unknown 
.RE
.PP

.PP
Definition at line 99 of file menuoption\&.c\&.
.PP
.nf
100 {
101   switch (op) {
102     case PLANT_TREE:
103       return "Plant Tree";
104 
105     case QUERY_TREE:
106       return "Query Tree";
107 
108     case UPDATE_TREE:
109       return "Update Tree";
110 
111     case EXIT_PROGRAM:
112       return "Exit Program";
113 
114     default:
115       return (char*) 0;
116   }
117 
118 }
.fi
.SS "void moption_display (\fBMenuOption\fP * opt)"
Display menu options
.PP
\fBParameters\fP
.RS 4
\fIopt\fP A MenuOption got from user's input 
.RE
.PP

.PP
Definition at line 71 of file menuoption\&.c\&.
.PP
.nf
72 {
73   printf("  ________                               \&.__                       \&.___ \n");
74   printf(" /  _____/_______   ____   ____    ____  |  |  _____     ____    __| _/ \n");
75   printf("/   \\  ___\\_  __ \\_/ __ \\_/ __ \\  /    \\ |  |  \\__  \\   /    \\  / __ |  \n");
76   printf("\\    \\_\\  \\|  | \\/\\  ___/\\  ___/ |   |  \\|  |__ / __ \\_|   |  \\/ /_/ |  \n");
77   printf(" \\______  /|__|    \\___  >\\___  >|___|  /|____/(____  /|___|  /\\____ |  \n");
78   printf("        \\/             \\/     \\/      \\/            \\/      \\/      \\/  \n\n");
79 
80   printf("(implemented) Welcome to greenland, a place to plant tree!\n\n");
81   printf("We don't have any affiliation to the Greenland government, but if \n"
82          "you can plant a tree there, we are more than welcome! :)\n");
83 
84   printf("################################\n");
85   printf("#                              #\n");
86   printf("#            MENU              #\n");
87   printf("#                              #\n");
88   printf("################################\n\n");
89   printf("\t1\&. To plant a tree\n");
90   printf("\t2\&. To query a tree\n");
91   printf("\t3\&. To update a tree's status\n");
92   printf("\t4\&. Exit\n");
93   printf("(Choose a service needed according to the number)\n\n");
94   printf("Option: ");
95   scanf("%d", (int*)opt);
96   system("clear");
97 }
.fi
.SS "char* moption_handle (int new_sockfd, int semid, char * cli_addr, \fBMenuOption\fP mo)"
Handles menu option
.PP
\fBParameters\fP
.RS 4
\fIsockfd\fP Socket number of client 
.br
\fIsemid\fP Semaphore's id 
.br
\fImo\fP A MenuOption enum to be handle
.RE
.PP
\fBReturns\fP
.RS 4
0 if the handling succeeded, -1 if failed 
.RE
.PP

.PP
Definition at line 29 of file menuoption\&.c\&.
.PP
.nf
30 {
31   char buffer[BUFFER_SIZE];
32   char* msg = malloc(1024);
33   Tree tree;
34 
35   switch (mo) {
36     case PLANT_TREE:
37       p(semid); // lock the semaphore for writing
38       plant_tree_server(FILENAME, tree, new_sockfd, buffer);
39       p(semid); // lock the semaphore for writing
40       sprintf(msg, "Client [%s]: Plant tree process done\&.", cli_addr);
41       return msg;
42       break;
43 
44     case QUERY_TREE:
45       query_tree_server(FILENAME, tree, new_sockfd, buffer);
46       sprintf(msg, "Client [%s]: Query tree process done\&.", cli_addr);
47       return msg;
48       break;
49 
50     case UPDATE_TREE:
51       p(semid); // lock the semaphore for writing
52       /* critical section */
53       /* invoke update_tree_server function */
54       update_tree_server(FILENAME, tree, new_sockfd, buffer);
55       v(semid); // unlock the semaphore after writing
56       sprintf(msg, "Client [%s]: Update tree process done\&.", cli_addr);
57       return msg;
58       break;
59 
60     case EXIT_PROGRAM:
61       sprintf(msg, "Client [%s]: Exited program\&.", cli_addr);
62       return msg;
63       break;
64 
65     default:
66       sprintf(msg, "Option %d not supported\n", mo);
67       return msg;
68   }
69 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for greenland from the source code\&.
