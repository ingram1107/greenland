.TH "lib/tree.h" 3 "Wed Nov 30 2022" "greenland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/tree.h
.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'tree_state\&.h'\fP
.br
\fC#include 'species\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTree\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBTree\fP \fBTree\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBTree\fP * \fBtree_create\fP (const char *sp, \fBtree_state\fP st, time_t d)"
.br
.ti -1c
.RI "void \fBtree_free\fP (\fBTree\fP *t)"
.br
.ti -1c
.RI "char * \fBtree_get_species\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "\fBtree_state\fP \fBtree_get_status\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "struct tm * \fBtree_get_day_planted\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "void \fBtree_set_species\fP (\fBTree\fP *t, const char *sp)"
.br
.ti -1c
.RI "void \fBtree_set_status\fP (\fBTree\fP *t, \fBtree_state\fP st)"
.br
.ti -1c
.RI "void \fBtree_set_day_planted\fP (\fBTree\fP *t, time_t d)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
2022-11-11 23:27:54 PM +0800 
.RE
.PP

.PP
Definition in file \fBtree\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBTree\fP \fBTree\fP"
\fBTree\fP data class that stores information about a tree including its species, its status, and the amount of days it has lived\&. 
.SH "Function Documentation"
.PP 
.SS "struct \fBTree\fP * tree_create (const char * sp, \fBtree_state\fP st, time_t d)"
Create a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIsp\fP A string specifies the species name for the \fBTree\fP 
.br
\fIst\fP A \fBTree\fP State enum specifies the current status for the \fBTree\fP 
.br
\fId\fP A time_t in seconds specifies the days alived of the \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A \fBTree\fP data class that contains the information about its species name, current status and the amount of days alived\&.
.RE
.PP
\fBAttention\fP
.RS 4
st must be valid 
.RE
.PP

.PP
Definition at line \fB9\fP of file \fBtree\&.c\fP\&.
.PP
.nf
10 {
11   Tree* new_tree = malloc(sizeof(Tree));
12   assert(trstat_is_valid(st));
13   new_tree->species = NULL;
14   tree_set_species(new_tree, sp);
15   tree_set_status(new_tree, st);
16   tree_set_day_planted(new_tree, d);
17 
18   return new_tree;
19 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "void tree_free (\fBTree\fP * t)"
Destroy a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIt\fP A tree data class to be destroyed 
.RE
.PP

.PP
Definition at line \fB21\fP of file \fBtree\&.c\fP\&.
.PP
.nf
22 {
23   free(t->species);
24   free(t);
25 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "struct tm * tree_get_day_planted (const \fBTree\fP * t)"
Get \fBTree\fP's the amount of days it has lived
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to struct tm indicates the day when the \fBTree\fP was planted 
.RE
.PP

.PP
Definition at line \fB37\fP of file \fBtree\&.c\fP\&.
.PP
.nf
38 {
39   return t->day_planted;
40 }
.fi
.PP
References \fBTree::day_planted\fP\&.
.SS "char * tree_get_species (const \fBTree\fP * t)"
Get \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A string that describes the \fBTree\fP's species name 
.RE
.PP

.PP
Definition at line \fB27\fP of file \fBtree\&.c\fP\&.
.PP
.nf
28 {
29   return t->species;
30 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "\fBtree_state\fP tree_get_status (const \fBTree\fP * t)"
Get \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A non-negative integer indicates the \fBTree\fP's current status 
.RE
.PP

.PP
Definition at line \fB32\fP of file \fBtree\&.c\fP\&.
.PP
.nf
33 {
34   return t->status;
35 }
.fi
.PP
References \fBTree::status\fP\&.
.SS "void tree_set_day_planted (\fBTree\fP * t, time_t d)"
Set \fBTree\fP's the amount of days it has lived
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed days of lived 
.br
\fId\fP A time_t in seconds 
.RE
.PP

.PP
Definition at line \fB57\fP of file \fBtree\&.c\fP\&.
.PP
.nf
58 {
59   if (tree_get_status(t) == DEAD) {
60     t->day_planted = NULL;
61   } else {
62     t->day_planted = localtime(&d);
63   }
64 }
.fi
.PP
References \fBTree::day_planted\fP\&.
.SS "void tree_set_species (\fBTree\fP * t, const char * sp)"
Set \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed species name 
.br
\fIsp\fP A string indicates a species name 
.RE
.PP

.PP
Definition at line \fB42\fP of file \fBtree\&.c\fP\&.
.PP
.nf
43 {
44   if (t->species) {
45     free(t->species);
46   }
47 
48   t->species = calloc(strlen(sp) + 1, sizeof(char));
49   strncpy(t->species, sp, strlen(sp) + 1);
50 }
.fi
.PP
References \fBTree::species\fP\&.
.SS "void tree_set_status (\fBTree\fP * t, \fBtree_state\fP st)"
Set \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed status 
.br
\fIst\fP A \fBTree\fP State enum 
.RE
.PP

.PP
Definition at line \fB52\fP of file \fBtree\&.c\fP\&.
.PP
.nf
53 {
54   t->status = st;
55 }
.fi
.PP
References \fBTree::status\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for greenland from the source code\&.
