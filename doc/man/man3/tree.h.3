.TH "lib/tree.h" 3 "Fri Jan 6 2023" "greenland" \" -*- nroff -*-
.ad l
.nh
.SH NAME
lib/tree.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br
\fC#include <stdint\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'tree_state\&.h'\fP
.br
\fC#include 'tree_coordinate\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBTree\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBTree\fP \fBTree\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBTree\fP * \fBtree_create\fP (const char *sp, \fBtree_state\fP st, const char *d, \fBtree_coordinate\fP c)"
.br
.ti -1c
.RI "void \fBtree_free\fP (\fBTree\fP *t)"
.br
.ti -1c
.RI "char * \fBtree_get_species\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "\fBtree_state\fP \fBtree_get_status\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "struct tm * \fBtree_get_day_planted\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "\fBtree_coordinate\fP \fBtree_get_coordinate\fP (const \fBTree\fP *t)"
.br
.ti -1c
.RI "void \fBtree_set_species\fP (\fBTree\fP *t, const char *sp)"
.br
.ti -1c
.RI "void \fBtree_set_status\fP (\fBTree\fP *t, \fBtree_state\fP st)"
.br
.ti -1c
.RI "void \fBtree_set_day_planted\fP (\fBTree\fP *t, const char *d)"
.br
.ti -1c
.RI "void \fBtree_set_coordinate\fP (\fBTree\fP *t, \fBtree_coordinate\fP c)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.PP
\fBDate\fP
.RS 4
2022-11-11 23:27:54 PM +0800 
.RE
.PP

.PP
Definition in file \fBtree\&.h\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef struct \fBTree\fP \fBTree\fP"
\fBTree\fP data class that stores information about a tree including its species, its status, and the amount of days it has lived\&. 
.SH "Function Documentation"
.PP 
.SS "struct \fBTree\fP* tree_create (const char * sp, \fBtree_state\fP st, const char * d, \fBtree_coordinate\fP c)"
Create a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIsp\fP A string specifies the species name for the \fBTree\fP 
.br
\fIst\fP A \fBTree\fP State enum specifies the current status for the \fBTree\fP 
.br
\fId\fP A string specifies the days alived of the \fBTree\fP in format Y-m-d, e\&.g\&. 2022-12-05
.br
\fIc\fP A \fBTree\fP coordinate struct that specify the longitude and latitude coordinate of the planted tree 
.RE
.PP
\fBReturns\fP
.RS 4
A \fBTree\fP data class that contains the information about its species name, current status and the amount of days alived\&.
.RE
.PP
\fBAttention\fP
.RS 4
st must be valid 
.RE
.PP

.PP
Definition at line 11 of file tree\&.c\&.
.PP
.nf
13 {
14   Tree* new_tree = malloc(sizeof(Tree));
15   tree_set_species(new_tree, sp);
16   tree_set_status(new_tree, st);
17   new_tree->day_planted = NULL;
18   tree_set_day_planted(new_tree, d);
19   tree_set_coordinate(new_tree, c);
20   return new_tree;
21 }
.fi
.PP
References Tree::day_planted, tree_set_coordinate(), tree_set_day_planted(), tree_set_species(), and tree_set_status()\&.
.SS "void tree_free (\fBTree\fP * t)"
Destroy a \fBTree\fP data class
.PP
\fBParameters\fP
.RS 4
\fIt\fP A tree data class to be destroyed 
.RE
.PP

.PP
Definition at line 60 of file tree\&.c\&.
.PP
.nf
61 {
62   free(t->day_planted);
63   free(t->species);
64   free(t);
65 }
.fi
.PP
References Tree::day_planted, and Tree::species\&.
.SS "\fBtree_coordinate\fP tree_get_coordinate (const \fBTree\fP * t)"
Get \fBTree\fP's the current coordinate
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to struct \fBtree_coordinate\fP indicates the coordinate where the \fBTree\fP was planted 
.RE
.PP

.PP
Definition at line 82 of file tree\&.c\&.
.PP
.nf
83 {
84   return t->coordinate;
85 }
.fi
.PP
References Tree::coordinate\&.
.SS "struct tm* tree_get_day_planted (const \fBTree\fP * t)"
Get \fBTree\fP's the amount of days it has lived
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A pointer to struct tm indicates the day when the \fBTree\fP was planted 
.RE
.PP

.PP
Definition at line 77 of file tree\&.c\&.
.PP
.nf
78 {
79   return t->day_planted;
80 }
.fi
.PP
References Tree::day_planted\&.
.SS "char* tree_get_species (const \fBTree\fP * t)"
Get \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A string that describes the \fBTree\fP's species name 
.RE
.PP

.PP
Definition at line 67 of file tree\&.c\&.
.PP
.nf
68 {
69   return t->species;
70 }
.fi
.PP
References Tree::species\&.
.SS "\fBtree_state\fP tree_get_status (const \fBTree\fP * t)"
Get \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A pointer to a \fBTree\fP
.RE
.PP
\fBReturns\fP
.RS 4
A non-negative integer indicates the \fBTree\fP's current status 
.RE
.PP

.PP
Definition at line 72 of file tree\&.c\&.
.PP
.nf
73 {
74   return t->status;
75 }
.fi
.PP
References Tree::status\&.
.PP
Referenced by tree_set_day_planted()\&.
.SS "void tree_set_coordinate (\fBTree\fP * t, \fBtree_coordinate\fP c)"
Set \fBTree\fP's coordinate where it was planted
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed planted coordinate 
.br
\fId\fP A struct specifies the coordinate 
.RE
.PP

.PP
Definition at line 117 of file tree\&.c\&.
.PP
.nf
118 {
119   t->coordinate = c;
120 }
.fi
.PP
References Tree::coordinate\&.
.PP
Referenced by tree_create()\&.
.SS "void tree_set_day_planted (\fBTree\fP * t, const char * d)"
Set \fBTree\fP's when it was planted
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed planted day 
.br
\fId\fP A string specifies the planted day 
.RE
.PP

.PP
Definition at line 103 of file tree\&.c\&.
.PP
.nf
104 {
105   if (tree_get_status(t) == DEAD) {
106     t->day_planted = NULL;
107   } else {
108     if (!t->day_planted) {
109       // handle the case when day_planted haven't allocated with memory
110       t->day_planted = malloc(sizeof(struct tm));
111     }
112 
113     strptime(d, "%F", t->day_planted);
114   }
115 }
.fi
.PP
References tree_get_status()\&.
.PP
Referenced by tree_create()\&.
.SS "void tree_set_species (\fBTree\fP * t, const char * sp)"
Set \fBTree\fP's species name
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed species name 
.br
\fIsp\fP A string indicates a species name 
.RE
.PP

.PP
Definition at line 87 of file tree\&.c\&.
.PP
.nf
88 {
89   if ((t->str_size = strlen(sp) + 1) > 0) {
90     t->species = calloc(t->str_size, sizeof(char));
91     strncpy(t->species, sp, t->str_size);
92   } else {
93     t->str_size = 0;
94     t->species = NULL;
95   }
96 }
.fi
.PP
References Tree::species, and Tree::str_size\&.
.PP
Referenced by tree_create()\&.
.SS "void tree_set_status (\fBTree\fP * t, \fBtree_state\fP st)"
Set \fBTree\fP's current status
.PP
\fBParameters\fP
.RS 4
\fIt\fP A modified \fBTree\fP with changed status 
.br
\fIst\fP A \fBTree\fP State enum 
.RE
.PP

.PP
Definition at line 98 of file tree\&.c\&.
.PP
.nf
99 {
100   t->status = st;
101 }
.fi
.PP
References Tree::status\&.
.PP
Referenced by tree_create()\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for greenland from the source code\&.
